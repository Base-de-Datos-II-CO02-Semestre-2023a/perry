{
  "version": 3,
  "sources": ["../../../app/components/Tabla.tsx", "../../../app/components/InputMenu.tsx"],
  "sourcesContent": ["\r\n\r\nexport type Header = {\r\n    name:string,\r\n    size:\"fit-content\"|\"100%\"|number,\r\n    \r\n}\r\n\r\nexport type Row = {\r\n    id: string|number,\r\n    data: string[],\r\n};\r\n/**\r\n * \r\n * @param props \r\n * @returns \r\n */\r\nexport default function Tabla(props:{headers:string[],rows:Row[], onRowSelected:(index:any)=>void}) {\r\n\r\n    return(\r\n        <div className=\"tableContainer\">\r\n            <table>\r\n                <thead>\r\n                    <tr className=\"header\">\r\n                        {props.headers.map((header,index) => {\r\n                            return <th className=\"hader-small on-surface-variant-text\"  key={index}>{header}</th>\r\n                        })}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        props.rows.map((row,index) => {\r\n                            return <tr key={row.id} onClick={()=>props.onRowSelected(row.id)}>\r\n                                {row.data.map((cell,index) => {\r\n                                    return <td className=\"body-large on-surface-variant-text\" key={index} >{cell}</td>\r\n                                })}\r\n                            </tr>     \r\n                        })\r\n                    }\r\n\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n\r\n}", "import { ChangeEvent, useEffect, useState } from \"react\";\r\nimport TextField from \"./TextField\";\r\n\r\nexport type Option = {\r\n    name:string,\r\n    value:string\r\n}\r\n\r\nexport default function InputMenu(props:{\r\n    icon?:string, \r\n    label:string, \r\n    name:string, \r\n    variant:\"outlined\"|\"filled\", \r\n    maxLenght?:number, \r\n    suggestFunction?:(value:string)=>Promise<Option[]> , \r\n    initialSuggestions?:Option[], \r\n    selectOnly?:boolean, \r\n    onOptionClicked?: (val:string)=>void, \r\n    onEnterPressed?:()=>void, initialValue?:string \r\n}){\r\n    var [suggestions, setSuggestions] = useState<Option[]>( props.initialSuggestions?props.initialSuggestions:[]);\r\n    var [value,setValue] = useState<string>(props.initialValue?props.initialValue:\"\");\r\n    const [active, setActive] = useState<number>(0);\r\n\r\n    const onInputChange = async (event:any)=>{\r\n        if (!props.selectOnly){\r\n            setValue(event.target.value);\r\n            if(props.suggestFunction){\r\n                let suggest = await props.suggestFunction(event.target.value);\r\n                setSuggestions(suggest);\r\n            }\r\n        }\r\n        event.target.value == \"\" && setSuggestions([]);\r\n    }\r\n\r\n    const onEnterPressed = (val:string)=>{\r\n        setValue(suggestions[active].value)\r\n        setSuggestions([]);\r\n        setTimeout(()=>{\r\n            props.onEnterPressed&& props.onEnterPressed()\r\n        }, 5)\r\n    }\r\n\r\n    const onArrowKeyPressed = (event:KeyboardEvent)=>{\r\n        console.log(event.key);\r\n        if((event.key == \"ArrowDown\" && !event.shiftKey )|| (event.key == \"ArrowUp\" && event.shiftKey)){\r\n            if(active < suggestions.length-1) setActive(active+1);\r\n            event.preventDefault();\r\n\r\n        }else if(event.key == \"ArrowUp\" || (event.key == \"ArrowDown\" && event.shiftKey) ){\r\n            event.preventDefault();\r\n            if(active > 0) setActive(active-1);\r\n        }\r\n    }\r\n\r\n    const onSuggestionSelected = ( val:string)=>{\r\n        setValue(val);\r\n        setSuggestions([]);\r\n        setTimeout(()=>{\r\n            props.onOptionClicked&& props.onOptionClicked(val)\r\n        }, 5)\r\n        \r\n    }\r\n    return(\r\n        <div className=\"inputMenu\">\r\n            <TextField icon={props.icon} \r\n                label={props.label} \r\n                name={props.name} \r\n                type=\"search\" \r\n                isValid={true} \r\n                variant=\"outlined\" \r\n                maxLength={props.maxLenght} \r\n                onChange={onInputChange} \r\n                onEnterPressed={onEnterPressed} \r\n                onArrowKeyPressed={onArrowKeyPressed} \r\n                value={value} \r\n                onClick={()=>setSuggestions(props.initialSuggestions || [])}\r\n            />\r\n            {\r\n                suggestions.length > 0 && <div className=\"column card suggest\">\r\n                    {\r\n                        suggestions.map((option, index)=>{\r\n                        return <option className={(index == suggestions.length-1 ? \"last \":\"\")+(index == active && \"active\")} key={index} onClick={()=>onSuggestionSelected(option.value)} onMouseDown={(event)=>{\r\n                            event.preventDefault();\r\n                        }}>\r\n                                {option.name}\r\n                            </option>\r\n                        })\r\n                    }\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}"],
  "mappings": "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",
  "names": ["index", "import_jsx_dev_runtime"]
}
