{
  "version": 3,
  "sources": ["../../../app/components/TextField.tsx"],
  "sourcesContent": ["import { ChangeEventHandler, InputHTMLAttributes, useRef, useState } from \"react\";\r\nimport Icon from \"./Icon\";\r\nimport { pattern } from \"isbot\";\r\n\r\n\r\nexport default function TextField(props: {\r\n    icon?:string, \r\n    label: string, \r\n    name: string, \r\n    type: string, \r\n    variant: \"outlined\", \r\n    onChange?: ChangeEventHandler<HTMLInputElement>, \r\n    isValid?: boolean, \r\n    min?:string|number, \r\n    max?:string|number, \r\n    fileAccept?:string, \r\n    maxLength?:number, \r\n    minLenght?:number, \r\n    onEnterPressed?:(value:string)=>void, value?:string, \r\n    onArrowKeyPressed?:(event:any)=>void, \r\n    onClick?:()=>void,\r\n    autoComplete?:string,\r\n    pattern?:string\r\n    autoCapitalize?:string\r\n}) {\r\n    const [isValid, setValid] = useState( props.isValid===undefined?true:props.isValid)\r\n    const descRef = useRef<HTMLInputElement>(null);\r\n\r\n    const onEnterPressed = (event:any)=>{\r\n        if(event.key == \"Enter\"){\r\n            if(props.onEnterPressed){\r\n                props.onEnterPressed(event);\r\n            }\r\n            descRef.current?.type==\"search\" && descRef.current?.blur();\r\n        }\r\n        if(event.key == \"ArrowDown\" || event.key == \"ArrowUp\"){\r\n            props.onArrowKeyPressed && props.onArrowKeyPressed(event);\r\n        }\r\n        \r\n    }\r\n    return (\r\n        <div className={\"textField \"+props.variant+\" \"+(isValid?\"\":\"error\")} onClick={props.onClick}>\r\n            \r\n            {\r\n                (props.icon && props.type != \"date\" )&& <Icon \r\n                    icon={props.icon} \r\n                    type={\"outlined\"}/>\r\n            \r\n            }\r\n            <label className=\"body-small\" \r\n                htmlFor={props.name}>\r\n                    {props.label}\r\n            </label>\r\n            \r\n            <input  \r\n                ref={descRef}\r\n                id={props.name} \r\n                name={props.name} \r\n                type={props.type} \r\n                placeholder=\" \" \r\n                className=\"body-large\" \r\n                onChange={props.onChange} \r\n                min={props.min} \r\n                max={props.max} \r\n                maxLength={props.maxLength} \r\n                minLength={props.minLenght} \r\n                onKeyDown={onEnterPressed} \r\n                value={props.value}\r\n                autoComplete={props.autoComplete? props.autoComplete:\"off\"}\r\n                pattern={props.pattern}\r\n            />\r\n        </div>\r\n    );\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA0E;AA4ClB;AAvCzC,SAAR,UAA2B,OAmB/B;AACC,QAAM,CAAC,SAAS,QAAQ,QAAI,uBAAU,MAAM,YAAU,SAAU,OAAK,MAAM,OAAO;AAClF,QAAM,cAAU,qBAAyB,IAAI;AAE7C,QAAM,iBAAiB,CAAC,UAAY;AA5BxC;AA6BQ,QAAG,MAAM,OAAO,SAAQ;AACpB,UAAG,MAAM,gBAAe;AACpB,cAAM,eAAe,KAAK;AAAA,MAC9B;AACA,qBAAQ,YAAR,mBAAiB,SAAM,cAAY,aAAQ,YAAR,mBAAiB;AAAA,IACxD;AACA,QAAG,MAAM,OAAO,eAAe,MAAM,OAAO,WAAU;AAClD,YAAM,qBAAqB,MAAM,kBAAkB,KAAK;AAAA,IAC5D;AAAA,EAEJ;AACA,SACI,mDAAC,SAAI,WAAW,eAAa,MAAM,UAAQ,OAAK,UAAQ,KAAG,UAAU,SAAS,MAAM,SAG3E;AAAA,UAAM,QAAQ,MAAM,QAAQ,UAAW;AAAA,MAAC;AAAA;AAAA,QACrC,MAAM,MAAM;AAAA,QACZ,MAAM;AAAA;AAAA,MAF8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAEnB;AAAA,IAGzB;AAAA,MAAC;AAAA;AAAA,QAAM,WAAU;AAAA,QACb,SAAS,MAAM;AAAA,QACV,gBAAM;AAAA;AAAA,MAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAGA;AAAA,IAEA;AAAA,MAAC;AAAA;AAAA,QACG,KAAK;AAAA,QACL,IAAI,MAAM;AAAA,QACV,MAAM,MAAM;AAAA,QACZ,MAAM,MAAM;AAAA,QACZ,aAAY;AAAA,QACZ,WAAU;AAAA,QACV,UAAU,MAAM;AAAA,QAChB,KAAK,MAAM;AAAA,QACX,KAAK,MAAM;AAAA,QACX,WAAW,MAAM;AAAA,QACjB,WAAW,MAAM;AAAA,QACjB,WAAW;AAAA,QACX,OAAO,MAAM;AAAA,QACb,cAAc,MAAM,eAAc,MAAM,eAAa;AAAA,QACrD,SAAS,MAAM;AAAA;AAAA,MAfnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAgBA;AAAA,OA7BJ;AAAA;AAAA;AAAA;AAAA,SA8BA;AAER;",
  "names": []
}
