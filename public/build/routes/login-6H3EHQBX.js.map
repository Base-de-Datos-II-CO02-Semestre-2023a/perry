{
  "version": 3,
  "sources": ["browser-route-module:routes/login.tsx?browser", "../../../app/routes/login.tsx"],
  "sourcesContent": ["export { default, links } from \"./routes/login.tsx\";", "\nimport { LinksFunction, LoaderArgs, LoaderFunction, fetch, redirect } from \"@remix-run/node\";\nimport { useState } from \"react\";\nimport Button from \"~/components/Button\";\nimport ErrorDialog from \"~/components/ErrorDialog\";\nimport TextField from \"~/components/TextField\";\nimport loginStylesUrl from \"~/styles/login.css\";\nexport const links: LinksFunction = () => {\n  return [{ rel: \"stylesheet\", href: loginStylesUrl }];\n};\n\nimport { ActionArgs } from \"@remix-run/node\";\nimport { useActionData, useSearchParams } from \"@remix-run/react\";\nimport { getUserSession, login } from \"~/utils/sessions.server\";\nimport { badRequest } from \"~/utils/request.server\";\n\n\nexport const loader: LoaderFunction = async ({ request }: LoaderArgs) => {\n  const [token, user, puesto] = await getUserSession(request);\n  if (token) {\n    return redirect('/');\n  }\n  return null;\n};\n\nexport const action = async ({ request }: ActionArgs) => {\n  const form = await request.formData();\n  const user = (form.get('user') as string);\n  const password = (form.get('password') as string);\n  const redirectTo = (form.get('redirectTo') as string);\n  if (user != '' && password != '') {\n    var response = await login(user, password, redirectTo);\n    console.log(response);\n    return response;\n  }\n  return { formError: \"Favor de llenar los campos\" };\n\n};\n\n\nexport default function Login() {\n  const [isRfcValid, setIsRfcValid] = useState(true);\n  const [isPasswordValid, setIsPasswordValid] = useState(true);\n  const [rfc, setRfc] = useState('');\n  const actionData = useActionData<typeof action>();\n  const [messageError, setMessageError] = useState(actionData?.formError || '');\n\n  const [searchParams] = useSearchParams();\n\n  function validateRfc(event: React.ChangeEvent<HTMLInputElement>) {\n    let rfc = event.target.value;\n    setRfc(event.target.value.toUpperCase());\n    setMessageError('');\n    if (rfc.length === 0) {\n      setIsRfcValid(false);\n      setMessageError('El RFC no puede estar vac\u00EDo');\n    } else if (rfc.length < 12) {\n      setIsRfcValid(false);\n      setMessageError('El RFC debe tener al menos 12 caracteres');\n    } else {\n      setIsRfcValid(true);\n      setMessageError('');\n    }\n  }\n\n  function validatePassword(event: React.ChangeEvent<HTMLInputElement>) {\n    let password = event.target.value;\n    setMessageError('');\n    if (password.length === 0) {\n      setIsPasswordValid(false);\n      setMessageError('La contrase\u00F1a no puede estar vac\u00EDa');\n    } else if (password.length < 8) {\n      setIsPasswordValid(false);\n      setMessageError('La contrase\u00F1a debe tener al menos 8 caracteres');\n    } else {\n      setIsPasswordValid(true);\n      setMessageError('');\n    }\n  }\n\n  const upperCase = (event: React.ChangeEvent<HTMLInputElement>) => {\n  };\n  return (\n    <>\r\n            <h2 className=\"display-large\">Inicio de sesi\u00F3n</h2>\r\n        \r\n            <form method=\"post\">\r\n                <input type=\"hidden\" name=\"redirectTo\" value={searchParams.get('redirectTo') || '/'} readOnly />\r\n                {messageError && <ErrorDialog message={messageError} />}\r\n                <TextField label=\"RFC\" name=\"user\" type=\"text\" variant={\"outlined\"} onChange={validateRfc} isValid={isRfcValid} autoComplete=\"off\" value={rfc} />\r\n                <TextField label=\"Contrase\u00F1a\" name=\"password\" type=\"password\" variant=\"outlined\" onChange={validatePassword} isValid={isPasswordValid} autoComplete=\"current-password\" />\r\n                <Button type=\"submit\" variant=\"filled\" label=\"Iniciar sesi\u00F3n\" className=\"primary\" color=\"primary\" disabled={!(isPasswordValid && isRfcValid)} />\r\n            </form>\r\n        </>);\n\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAEA,mBAAyB;;;;;;AAWzB,sBAAsC;AAsElC;AA5EG,IAAM,QAAuB,MAAM;AACxC,SAAO,CAAC,EAAE,KAAK,cAAc,MAAM,cAAe,CAAC;AACrD;AA+Be,SAAR,QAAyB;AAC9B,QAAM,CAAC,YAAY,aAAa,QAAI,uBAAS,IAAI;AACjD,QAAM,CAAC,iBAAiB,kBAAkB,QAAI,uBAAS,IAAI;AAC3D,QAAM,CAAC,KAAK,MAAM,QAAI,uBAAS,EAAE;AACjC,QAAM,aAAa,cAA6B;AAChD,QAAM,CAAC,cAAc,eAAe,QAAI,wBAAS,yCAAY,cAAa,EAAE;AAE5E,QAAM,CAAC,YAAY,IAAI,gBAAgB;AAEvC,WAAS,YAAY,OAA4C;AAC/D,QAAIA,OAAM,MAAM,OAAO;AACvB,WAAO,MAAM,OAAO,MAAM,YAAY,CAAC;AACvC,oBAAgB,EAAE;AAClB,QAAIA,KAAI,WAAW,GAAG;AACpB,oBAAc,KAAK;AACnB,sBAAgB,gCAA6B;AAAA,IAC/C,WAAWA,KAAI,SAAS,IAAI;AAC1B,oBAAc,KAAK;AACnB,sBAAgB,0CAA0C;AAAA,IAC5D,OAAO;AACL,oBAAc,IAAI;AAClB,sBAAgB,EAAE;AAAA,IACpB;AAAA,EACF;AAEA,WAAS,iBAAiB,OAA4C;AACpE,QAAI,WAAW,MAAM,OAAO;AAC5B,oBAAgB,EAAE;AAClB,QAAI,SAAS,WAAW,GAAG;AACzB,yBAAmB,KAAK;AACxB,sBAAgB,0CAAoC;AAAA,IACtD,WAAW,SAAS,SAAS,GAAG;AAC9B,yBAAmB,KAAK;AACxB,sBAAgB,mDAAgD;AAAA,IAClE,OAAO;AACL,yBAAmB,IAAI;AACvB,sBAAgB,EAAE;AAAA,IACpB;AAAA,EACF;AAEA,QAAM,YAAY,CAAC,UAA+C;AAAA,EAClE;AACA,SACE,sFACQ;AAAA,uDAAC,QAAG,WAAU,iBAAgB,mCAA9B;AAAA;AAAA;AAAA;AAAA,WAA8C;AAAA,IAE9C,mDAAC,UAAK,QAAO,QACT;AAAA,yDAAC,WAAM,MAAK,UAAS,MAAK,cAAa,OAAO,aAAa,IAAI,YAAY,KAAK,KAAK,UAAQ,QAA7F;AAAA;AAAA;AAAA;AAAA,aAA8F;AAAA,MAC7F,gBAAgB,mDAAC,eAAY,SAAS,gBAAtB;AAAA;AAAA;AAAA;AAAA,aAAoC;AAAA,MACrD,mDAAC,aAAU,OAAM,OAAM,MAAK,QAAO,MAAK,QAAO,SAAS,YAAY,UAAU,aAAa,SAAS,YAAY,cAAa,OAAM,OAAO,OAA1I;AAAA;AAAA;AAAA;AAAA,aAA+I;AAAA,MAC/I,mDAAC,aAAU,OAAM,iBAAa,MAAK,YAAW,MAAK,YAAW,SAAQ,YAAW,UAAU,kBAAkB,SAAS,iBAAiB,cAAa,sBAApJ;AAAA;AAAA;AAAA;AAAA,aAAuK;AAAA,MACvK,mDAAC,UAAO,MAAK,UAAS,SAAQ,UAAS,OAAM,qBAAiB,WAAU,WAAU,OAAM,WAAU,UAAU,EAAE,mBAAmB,eAAjI;AAAA;AAAA;AAAA;AAAA,aAA8I;AAAA,SALlJ;AAAA;AAAA;AAAA;AAAA,WAMA;AAAA,OATR;AAAA;AAAA;AAAA;AAAA,SAUI;AAER;",
  "names": ["rfc"]
}
