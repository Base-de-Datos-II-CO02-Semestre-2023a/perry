{
  "version": 3,
  "sources": ["empty-module:./sessions.server", "browser-route-module:routes/rh._index.tsx?browser", "../../../app/routes/rh._index.tsx", "../../../app/components/ExtendedFAB.tsx", "../../../app/components/InformacionCantidad.tsx", "../../../app/components/AgregarEmpleadoOverlay.tsx", "../../../app/components/Overlay.tsx", "../../../app/utils/ciudad.api.ts", "../../../app/utils/api.config.ts", "../../../app/components/NuevoContratoOverlay.tsx", "../../../app/utils/lugar.api.ts"],
  "sourcesContent": ["module.exports = {};", "export { ErrorBoundary, default } from \"./routes/rh._index.tsx\";", "import { ActionArgs, LoaderArgs, LoaderFunction, redirect } from \"@remix-run/node\";\r\nimport { Links, Meta, Scripts, isRouteErrorResponse, useActionData, useLoaderData, useMatches, useNavigate, useRouteError, useRouteLoaderData } from \"@remix-run/react\";\r\nimport { FormEvent, useEffect, useState } from \"react\";\r\nimport ExtendedFAB from \"~/components/ExtendedFAB\";\r\nimport FAB from \"~/components/FAB\";\r\nimport InformacionCantidad from \"~/components/InformacionCantidad\";\r\nimport Tabla, { Header, Row } from \"~/components/Tabla\";\r\nimport { Empleado } from \"~/types/Empleado\";\r\nimport { getContarEmpleadosVacaciones, getEmpleadosMasProductivos, getEmpleadosMenosProductivos, registrarEmpleado } from \"~/utils/empleados.server\";\r\nimport { getUserSession } from \"~/utils/sessions.server\";\r\nimport { AgregarEmpleadoOverlay, agregarEmpleado } from \"../components/AgregarEmpleadoOverlay\";\r\nimport Overlay from \"~/components/Overlay\";\r\nimport InformacionGeneral from \"~/components/InformacionGeneral\";\r\nimport { registrarNuevoContrato } from \"~/components/NuevoContratoOverlay\";\r\n\r\nexport const loader: LoaderFunction = async ({ request, params }: LoaderArgs) => {\r\n    \r\n    let empleados = await getEmpleadosMasProductivos(request);\r\n    let productivos: Row[] = [];\r\n    if (empleados) {\r\n        productivos = empleados.map((empleado) => {\r\n            return {\r\n                id: empleado.id,\r\n                data: [empleado.nombre, empleado.indiceProductividad]\r\n            } as Row;\r\n        })\r\n    }\r\n\r\n\r\n    empleados = await getEmpleadosMenosProductivos(request);\r\n    let inproductivos: Row[] = [];\r\n    if (empleados) {\r\n        inproductivos = empleados.map((empleado) => {\r\n            return {\r\n                id: empleado.id,\r\n                data: [empleado.nombre, empleado.indiceProductividad]\r\n            } as Row;\r\n        })\r\n    }\r\n\r\n    let [token] = await getUserSession(request);\r\n\r\n    let response = await getContarEmpleadosVacaciones(request);\r\n    const empleadosVacaciones = response?.empleados;\r\n\r\n    return {\r\n        title: \"Inicio\",\r\n        productivos,\r\n        inproductivos,\r\n        token,\r\n        empleadosVacaciones\r\n    };\r\n}\r\n\r\n\r\n\r\nexport const action = async ({ request }: ActionArgs) => {\r\n    const fromulario = await request.formData();\r\n\r\n    const overlay = fromulario.get(\"action\") as string;\r\n    \r\n    switch (overlay) {\r\n        case \"agregarEmpleado\":\r\n            return await agregarEmpleado(fromulario, request);\r\n        case \"nuevoContrato\":\r\n            return await registrarNuevoContrato(fromulario, request);\r\n    }\r\n    return {\r\n        status: 500,\r\n        formError:\"Error\"\r\n    }\r\n}\r\n\r\n\r\nexport default function Index() {\r\n\r\n    const navigate = useNavigate();\r\n    const matches = useMatches();\r\n    \r\n    const actionData = useActionData<typeof action>();\r\n    const loaderData = useLoaderData<typeof loader>()\r\n    \r\n    const [newEmpleado, setNewEmpleado] = useState(false);\r\n    \r\n    const openEmpleado = (id: string) => {\r\n        navigate(`/rh/empleados/${id}?redirectTo=%2f`);\r\n    };\r\n    \r\n    const headers = [\"Nombre\", \"Prod\"];\r\n\r\n    return (\r\n        <>\r\n            <div className=\"actionsBar\">\r\n                <ExtendedFAB icon=\"add\" label=\"Crear objetivo\" variant=\"primary\" onClick={() => { }} />\r\n                <ExtendedFAB icon=\"add\" label=\"Registrar falta\" variant=\"primary\" onClick={() => { }} />\r\n                <ExtendedFAB icon=\"add\" label=\"Nuevo empleado\" variant=\"tertiary\" onClick={() => { setNewEmpleado(true) }} />\r\n                <ExtendedFAB icon=\"sync_alt\" label=\"Transferir empleado\" variant=\"primary\" onClick={() => { }} />\r\n                <ExtendedFAB icon=\"edit\" label=\"Modificar contrato\" variant=\"primary\" onClick={() => { }} />\r\n            </div>  \r\n            <div className=\"row\">\r\n                <section className=\"card\">\r\n                    <h3 className=\"header-large on-surface-variant-text\">Empleados m\u00E1s productivos</h3>\r\n                    <Tabla headers={headers} rows={loaderData.productivos} onRowSelected={openEmpleado} />\r\n                </section>\r\n                <section className=\"card\">\r\n                    <h3 className=\"header-large on-surface-variant-text\">Empleados menos productivos</h3>\r\n                    <Tabla headers={headers} rows={loaderData.inproductivos} onRowSelected={openEmpleado} />\r\n                </section>\r\n                <section className=\"column fit\">\r\n                    <InformacionCantidad variant=\"grande\" type=\"filled\" cantidad={loaderData.empleadosVacaciones} title=\"Empleados de vacaciones\" />\r\n                    <InformacionCantidad variant=\"grande\" type=\"filled\" cantidad={56} title=\"Contratos proximos a concluir\" />\r\n                    <InformacionCantidad variant=\"grande\" type=\"filled\" cantidad={56} title=\"Promedio de productividad\" />\r\n                </section>\r\n            </div>\r\n            <AgregarEmpleadoOverlay isDisplayed={newEmpleado} setDisplayed={setNewEmpleado} token={loaderData.token}/>\r\n            \r\n        </>\r\n    );\r\n}\r\n\r\nexport function ErrorBoundary() {\r\n    const error = useRouteError()\r\n    if (isRouteErrorResponse(error)) {\r\n        return (\r\n          <div className=\"error-container\">\r\n            <h1>\r\n              {error.status} {error.statusText}\r\n            </h1>\r\n            <p>{error.data}</p>\r\n          </div>\r\n        );\r\n      } else if (error instanceof Error) {\r\n        return (\r\n          <div className=\"error-container\">\r\n            <h1>Error</h1>\r\n            <p>{error.message}</p>\r\n            <p>The stack trace is:</p>\r\n            <pre>{error.stack}</pre>\r\n          </div>\r\n        );\r\n      } else {\r\n        return <h1 className=\"error-container\">Unknown Error</h1>;\r\n      }\r\n  }\r\n  ", "import Icon from \"./Icon\";\r\n\r\nexport default function ExtendedFAB(props:{onClick:()=>void, icon:string, label:string, variant:\"primary\"|\"secondary\"|\"tertiary\"|\"surface\"}){\r\n    return(\r\n        <button className={\"extended fab \"+props.variant} onClick={props.onClick}>\r\n            <Icon icon={props.icon} type=\"outlined\"/>\r\n            <label>{props.label}</label>\r\n            <div className={'state-layer on-primary'}/>\r\n        </button>\r\n    );\r\n}", "export default function (props:{variant:\"peque\u00F1o\"|\"mediano\"|\"grande\", type:\"filled\"|\"transparent\", cantidad:number, title:string}){\r\n    const pClass = props.variant==\"peque\u00F1o\"?\"title-small\":props.variant == \"mediano\"?\"title-large\":\"display-large\";\r\n    const labelClass = props.variant==\"peque\u00F1o\"?\"label-small\":props.variant==\"mediano\"?\"label-medium\":\"label-large\";\r\n    return(\r\n        <div className={\"informacion cantidad \"+props.type+\" \"+props.variant}>\r\n            <p className={pClass}>{props.cantidad}</p>\r\n            <label className={labelClass}>{props.title}</label>\r\n        </div>\r\n    );\r\n}", "import { useFetcher } from \"@remix-run/react\";\r\nimport { useState } from \"react\";\r\nimport InputMenu, { Option } from \"~/components/InputMenu\";\r\nimport Overlay from \"~/components/Overlay\";\r\nimport TextField from \"~/components/TextField\";\r\nimport { Ciudad } from \"~/types/Ciudad\";\r\nimport { Empleado } from \"~/types/Empleado\";\r\nimport { suggestCiudad } from \"~/utils/ciudad.api\";\r\nimport { registrarEmpleado } from \"~/utils/empleados.server\";\r\nimport { NuevoContratoOverlay } from \"./NuevoContratoOverlay\";\r\n\r\nexport const agregarEmpleado = async (form: FormData, request: Request) => {\r\n\r\n    const nombre = form.get(\"nombre\") as string;\r\n    const rfc = form.get(\"rfc\") as string;\r\n    const correo = form.get(\"correo\") as string;\r\n    const contrase\u00F1a = form.get(\"contrase\u00F1a\") as string;\r\n    const ciudad = form.get(\"ciudad\") as string;\r\n    const calle = form.get(\"calle\") as string;\r\n\r\n    let telefono: string | number = form.get(\"telefono\") as string;\r\n    telefono = parseInt(telefono);\r\n\r\n    let nss: string | number = form.get(\"nss\") as string;\r\n    nss = parseInt(nss);\r\n\r\n    let fechaNacimiento: string | Date = form.get(\"fechaNacimiento\") as string;\r\n    fechaNacimiento = new Date(fechaNacimiento);\r\n\r\n    let nexterno: string | number = form.get(\"nexterno\") as string;\r\n    nexterno = parseInt(nexterno);\r\n\r\n    let ninterno: string | number = form.get(\"ninterno\") as string;\r\n    ninterno = parseInt(ninterno);\r\n\r\n    let cp: string | number = form.get(\"cp\") as string;\r\n    cp = parseInt(cp);\r\n\r\n    // Si todos los campos tienen valor continua, si no regresa un error\r\n    if (!nombre || !telefono || !rfc || !nss || !correo || !contrase\u00F1a || !fechaNacimiento || !ciudad || !calle || !nexterno || !ninterno || !cp) {\r\n        return {\r\n            status: 400,\r\n            formError: \"Todos los campos son obligatorios\"\r\n        }\r\n    }\r\n\r\n    const empleado: Empleado = {\r\n\r\n        nombre: nombre,\r\n        telefono: telefono,\r\n        correo: correo,\r\n        codigoPostal: cp,\r\n        idCiudad: ciudad,\r\n        calle: calle,\r\n        numeroInterno: ninterno,\r\n        numeroExterno: nexterno,\r\n        nss: nss,\r\n        rfc: rfc,\r\n        fechaDeNacimiento: fechaNacimiento,\r\n        fechaDeIngreso: new Date(Date.now()),\r\n        indiceProductividad: 1,\r\n        password: contrase\u00F1a\r\n    }\r\n\r\n    const r = await registrarEmpleado(request, empleado)\r\n\r\n    if (r.status == 200) {\r\n        return {\r\n            status: 200,\r\n            data: r.data as {\r\n                id: number\r\n            }\r\n        }\r\n    } else {\r\n        return {\r\n            status: r.status,\r\n            formError: r.error\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport function AgregarEmpleadoOverlay(props: {\r\n    isDisplayed: boolean;\r\n    setDisplayed: (val: boolean) => void,\r\n    token: string,\r\n}\r\n) {\r\n\r\n    const [rfc, setRfc] = useState(\"\");\r\n    const [newContrato, setNewContrato] = useState(false);\r\n\r\n    const fetcher = useFetcher();\r\n\r\n    const onRfcChange = (e: any) => {\r\n        let rfcU: string = e.target.value;\r\n        rfcU = rfcU.toUpperCase();\r\n        setRfc(rfcU);\r\n    };\r\n\r\n    const onEmpleadoAgregado = () => {\r\n        props.setDisplayed(false);\r\n        setNewContrato(true);\r\n    }\r\n\r\n\r\n\r\n    const [id, setId] = useState<number>();\r\n    const [nombre, setNombre] = useState<string>(\"\")\r\n\r\n    const updateData = (data: {\r\n        id: number,\r\n        nombre: string\r\n    }) => {\r\n        console.log(data)\r\n        setId(data.id);\r\n        setNombre(data.nombre);\r\n    }\r\n\r\n\r\n    const suggestCiudades = async (val: string) => {\r\n        let sCiudad: Ciudad[] = [];\r\n        if (val != \"\") {\r\n            sCiudad = await suggestCiudad(props.token, val);\r\n\r\n            return sCiudad.map(c => {\r\n                return {\r\n                    name: c.nombre,\r\n                    value: c.id\r\n                } as Option;\r\n            });\r\n        }\r\n        return [];\r\n\r\n    };\r\n\r\n\r\n    return (<>\r\n        {\r\n            props.isDisplayed && <Overlay\r\n                isCancelable={() => props.setDisplayed(false)}\r\n                onPrimary={onEmpleadoAgregado}\r\n                onSecundary={() => props.setDisplayed(false)}\r\n                primaryText=\"Registrar\"\r\n                secondaryText=\"Cancelar\"\r\n                name={\"agregarEmpleado\"}\r\n                action=\"?index\"\r\n                updateData={updateData}\r\n            >\r\n                <h2 className=\"display-medium on-surface-text\">Agregar empleado</h2>\r\n                <TextField\r\n                    label={\"Nombre completo\"}\r\n                    name={\"nombre\"}\r\n                    type={\"text\"}\r\n                    variant={\"outlined\"}\r\n                />\r\n                <div className=\"row\">\r\n                    <TextField\r\n                        label={\"Telefono\"}\r\n                        name={\"telefono\"}\r\n                        type={\"tel\"}\r\n                        variant={\"outlined\"}\r\n                        pattern=\"[0-9]{10}\"\r\n                        maxLength={10}\r\n                    />\r\n                    <TextField\r\n                        value={rfc}\r\n                        label={\"RFC\"}\r\n                        name={\"rfc\"}\r\n                        type={\"text\"}\r\n                        variant={\"outlined\"}\r\n                        minLenght={12}\r\n                        maxLength={13}\r\n                        autoCapitalize=\"words\"\r\n                        onChange={onRfcChange}\r\n                    />\r\n                    <TextField\r\n                        label={\"NSS\"}\r\n                        name={\"nss\"}\r\n                        type={\"number\"}\r\n                        variant={\"outlined\"}\r\n                        pattern=\"[0-9]{11}\"\r\n                        max={99999999999}\r\n                    />\r\n                </div>\r\n                <div className=\"row\">\r\n                    <TextField\r\n                        label={\"Correo electronico\"}\r\n                        name={\"correo\"} type={\"email\"}\r\n                        variant={\"outlined\"}\r\n                        autoComplete=\"none\"\r\n                    />\r\n                    <TextField\r\n                        label={\"Contrase\u00F1a\"}\r\n                        name={\"contrase\u00F1a\"}\r\n                        type={\"password\"}\r\n                        variant={\"outlined\"}\r\n                        autoComplete=\"none\"\r\n                    />\r\n                    <TextField\r\n                        label={\"Fecha de nacimiento\"}\r\n                        name={\"nacim\"}\r\n                        type={\"date\"}\r\n                        variant={\"outlined\"}\r\n                    />\r\n                </div>\r\n                <div className=\"row\">\r\n                    <InputMenu\r\n                        label={\"Ciudad\"}\r\n                        name={\"ciudad\"}\r\n                        variant={\"outlined\"}\r\n                        suggestFunction={suggestCiudades}\r\n                    />\r\n                    <TextField\r\n                        label={\"Calle\"}\r\n                        name={\"calle\"}\r\n                        type={\"text\"}\r\n                        variant={\"outlined\"}\r\n                    />\r\n                </div>\r\n                <div className=\"row\">\r\n                    <TextField\r\n                        label={\"No. Externo\"}\r\n                        name={\"nexterno\"}\r\n                        type={\"number\"}\r\n                        variant={\"outlined\"}\r\n                        min={0}\r\n                    />\r\n                    <TextField\r\n                        label={\"No. Interno\"}\r\n                        name={\"ninterno\"}\r\n                        type={\"number\"}\r\n                        variant={\"outlined\"}\r\n                        min={0}\r\n                    />\r\n                    <TextField\r\n                        label={\"C\u00F3digo Postal\"}\r\n                        name={\"cp\"}\r\n                        type={\"tel\"}\r\n                        variant={\"outlined\"}\r\n                        pattern=\"[0-9]{5}\"\r\n                        maxLength={5}\r\n                    />\r\n                </div>\r\n            </Overlay>\r\n        }\r\n        {\r\n            <NuevoContratoOverlay token={props.token} setNewContrato={setNewContrato} id={id} nombre={nombre} isDisplayed={newContrato} />\r\n        }\r\n    </>\r\n    );\r\n}\r\n\r\n", "import { ReactNode, useEffect, useState } from \"react\";\r\nimport Button from \"./Button\";\r\nimport { Form } from \"@remix-run/react\";\r\nimport { useFetcher } from \"react-router-dom\";\r\nimport ErrorDialog from \"./ErrorDialog\";\r\n/**\r\n * Toda accion que maneje el formulario creado por este componente debe retornar\r\n * {\r\n *  status:number\r\n *  data:any\r\n * }\r\n * o en caso de error\r\n * {\r\n * status:number\r\n * formError:string\r\n * }\r\n * @param props \r\n * @returns \r\n */\r\nexport default function Overlay(props: {\r\n    children?: ReactNode | ReactNode[],\r\n    onPrimary?: () => any,\r\n    onSecundary?: () => any,\r\n    isCancelable?: () => any\r\n    primaryText?: string,\r\n    secondaryText?: string,\r\n    name: string;\r\n    action: string;\r\n    updateData?:(data: any) => void\r\n}) {\r\n    const [errorMessage, setErrorMesage] = useState<string>(\"\")\r\n    const fetcher = useFetcher()\r\n    const data:{ \r\n        status: number,\r\n        data: any\r\n    }|{\r\n        status:number\r\n        formError:string\r\n    }| undefined = fetcher.data;\r\n\r\n    useEffect(() => {\r\n        if (data) {\r\n            const status = data.status;\r\n            if (status != 200) {\r\n                setErrorMesage(data.formError)\r\n            }else if(fetcher.state == \"idle\") {\r\n                setErrorMesage(\"\")\r\n                props.updateData&& props.updateData(fetcher.data.data)\r\n                props.onPrimary&&props.onPrimary();\r\n            }\r\n        }\r\n    }, [fetcher.state]);\r\n    \r\n    return (\r\n        <>\r\n            <div className=\"overlayBackground\"\r\n                onClick={props.isCancelable}\r\n            >\r\n\r\n            </div>\r\n            <fetcher.Form method=\"post\" action={props.action} className=\"overlay\">\r\n                {errorMessage != \"\" ? <ErrorDialog message={errorMessage} /> : <></>}\r\n                <input name=\"action\" hidden value={props.name} readOnly></input>\r\n                {props.children}\r\n                <div className=\"row buttons\">\r\n                    {props.onPrimary && <Button type={\"submit\"} variant={\"filled\"} className=\"primary\" label={props.primaryText} />}\r\n                    {props.onSecundary && <Button type={\"button\"} variant={\"outlined\"} className=\"secondary\" label={props.secondaryText} onClick={props.onSecundary} />}\r\n                </div>\r\n            </fetcher.Form>\r\n        </>\r\n    );\r\n}", "import { Ciudad } from \"~/types/Ciudad\";\r\nimport { requestOptionsGetClient, url } from \"./api.config\";\r\n\r\nexport async function suggestCiudad( token:string, query: string){\r\n\r\n    const requestOptions = requestOptionsGetClient(token);\r\n\r\n    const ciudades = fetch(`${url}/ciudad/buscar/${query}`, requestOptions).then(response=>{\r\n        return response.text().then(text => {\r\n            return JSON.parse(text) as Ciudad[]\r\n        })\r\n    })\r\n\r\n    return await ciudades;\r\n}", "import { createCookieSessionStorage } from \"@remix-run/node\";\r\nimport { getUserSession } from \"./sessions.server\";\r\n\r\nexport const url = \"http://localhost:8080\"\r\n\r\n\r\nexport async function requestOptionsGET(request:Request){\r\n    const [token, rfc] = await getUserSession(request);\r\n    var myHeaders = new Headers();\r\n    myHeaders.append(\"Authorization\", `Bearer ${token}`);\r\n    var requestOptions:RequestInit = {\r\n    method: 'GET',\r\n    headers: myHeaders,\r\n    redirect: 'follow'\r\n    };\r\n\r\n    return requestOptions;\r\n}\r\n\r\n\r\nexport function requestOptionsGetClient(token:string){\r\n    var myHeaders = new Headers();\r\n    myHeaders.append(\"Authorization\", `Bearer ${token}`)\r\n    var requestOptions: RequestInit = {\r\n        mode:'cors',\r\n        method: 'GET',\r\n        headers: myHeaders,\r\n        redirect: 'follow',\r\n    };\r\n    return requestOptions;\r\n}\r\n\r\n\r\nexport async function postRequestOptions(request: Request, empleado: Empleado) {\r\n    var myHeaders = new Headers();\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n    const [token, rfc] = await getUserSession(request);\r\n    myHeaders.append(\"Authorization\", `Bearer ${token}`);\r\n    var requestOptions: RequestInit = {\r\n        method: 'POST',\r\n        headers: myHeaders,\r\n        body: JSON.stringify(empleado),\r\n        redirect: 'follow'\r\n    };\r\n    return requestOptions;\r\n}", "import { ChangeEvent, useRef, useState } from \"react\";\r\nimport InputMenu from \"~/components/InputMenu\";\r\nimport Overlay from \"~/components/Overlay\";\r\nimport TextField from \"~/components/TextField\";\r\nimport InformacionGeneral from \"./InformacionGeneral\";\r\nimport { Contrato } from \"~/types/Contrato\";\r\nimport { Option } from \"~/components/InputMenu\";\r\nimport { nuevoContrato } from \"~/utils/empleados.server\";\r\nimport { LugarOption } from \"~/types/Lugar\";\r\nimport { suggestLugar } from \"~/utils/lugar.api\";\r\n\r\nexport const registrarNuevoContrato = async (form:FormData, request:Request) => {\r\n    const empleado = form.get(\"empleado\") as string;\r\n    const puesto = form.get(\"puesto\") as string;\r\n    let lugar: number|string = form.get(\"lugar\") as string;\r\n    lugar = parseInt(lugar);\r\n    let salario: number|string = form.get(\"salario\") as string;\r\n    salario = parseFloat(salario);\r\n    const fechaInicio: string = form.get(\"inicio\") as string;\r\n    const fechaFin: string = form.get(\"fin\") as string;\r\n    const vacaciones = form.get(\"vacaciones\") as string;\r\n    const horas = form.get(\"horas\") as string;\r\n\r\n    // si los campos estan vacios regresar un error\r\n    if (!empleado || !puesto || !lugar || !salario || !fechaInicio || !vacaciones || !horas) {\r\n        return {\r\n            status: 400,\r\n            formError: \"Faltan campos por llenar\"\r\n        }\r\n    }\r\n    const contrato: Contrato ={\r\n        idEmpleado: parseInt(empleado),\r\n        idLugar: lugar,\r\n        fechaInicio: new Date(fechaInicio),\r\n        puesto: puesto,\r\n        salario: salario,\r\n        diasVacaciones:parseInt(vacaciones),\r\n        horasDiarias: parseInt(horas)\r\n    }\r\n\r\n    if (fechaFin) contrato.fechaFin = new Date(fechaFin);\r\n\r\n    const r = await nuevoContrato(request, contrato);\r\n\r\n    if (r.status == 200) {\r\n        return {\r\n            status: 200,\r\n            data:r.data\r\n        }\r\n    }\r\n    return {\r\n        status: r.status,\r\n        formError: r.error\r\n    }\r\n}\r\n\r\nexport function NuevoContratoOverlay(props: {\r\n    setNewContrato: (val: boolean) => void;\r\n    isDisplayed: boolean;\r\n    id?: number | undefined;\r\n    nombre?: string;\r\n    token: string;\r\n}) {\r\n    const [startDate, setStartDate] = useState<Date>(new Date());\r\n\r\n    const updateStartDate = (e: ChangeEvent) => {\r\n        setStartDate(new Date(e.currentTarget.value));\r\n    };\r\n\r\n    const ref = useRef<HTMLInputElement>(null);\r\n\r\n    const puestos:Option[]=[\r\n        {\r\n            name:\"Recursos Humanos\",\r\n            value:\"Recursos_Humanos\"\r\n        },\r\n        {\r\n            name: \"Ventas\",\r\n            value: \"Ventas\"\r\n        },\r\n        {\r\n            name: \"Inventario\",\r\n            value: \"Inventario\"\r\n        },\r\n        {\r\n            name: \"Finanzas\",\r\n            value: \"Finanzas\"\r\n        },\r\n        {\r\n            name: \"Administrador\",\r\n            value: \"Admin\"\r\n        }   \r\n    ]\r\n\r\n    const suggestLugarOptions = async (input:string) => {\r\n        let lugares:LugarOption[] = [];\r\n    \r\n        if (input != \"\"){\r\n            lugares = await suggestLugar(props.token, input);\r\n            console.log(lugares)\r\n            return (lugares.map((lugar) => {\r\n                return {\r\n                    name: lugar.nombre,\r\n                    value: lugar.id.toString()\r\n                } as Option\r\n            }));\r\n        }\r\n        return [];\r\n    }\r\n    return <>\r\n        {props.isDisplayed &&\r\n            <Overlay primaryText={\"Crear\"} name={\"nuevoContrato\"} action={\"?index\"} onPrimary={() => props.setNewContrato(false)}>\r\n                <div className=\"column\">\r\n                    <h2 className=\"display-medium on-surface-text\">Nuevo contrato</h2>\r\n                    {(props.id && props.nombre) ?\r\n                        <div className=\"row\">\r\n                            <InformacionGeneral label={\"Id del Empleado\"} content={props.id.toString()} variant={\"default\"} type={\"filled\"} />\r\n                            <InformacionGeneral label={\"Nombre del empleado\"} content={props.nombre} variant={\"default\"} type={\"filled\"} />\r\n                            <input name={\"empleado\"} value={props.id.toString()} type={\"text\"} readOnly hidden></input>\r\n                        </div>:\r\n                        <InputMenu label={\"Empleado\"} name={\"empleado\"} variant={\"outlined\"} />\r\n                    }  \r\n                    <div className=\"row\">\r\n                        <InputMenu label={\"Puesto*\"} name={\"puesto\"} variant={\"filled\"} initialSuggestions={puestos} selectOnly />\r\n                        <InputMenu label={\"Lugar*\"} name={\"lugar\"} variant={\"filled\"} suggestFunction={suggestLugarOptions}/>\r\n                        <TextField label={\"Salario*\"} name={\"salario\"} type={\"number\"} variant={\"outlined\"} min={0} max={100000000}/>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <TextField label={\"Dias de vacaciones al a\u00F1o*\"} name={\"vacaciones\"} type={\"number\"} variant={\"outlined\"} max={365} min={6} />\r\n                        <TextField label={\"Horas diarias\"} name=\"horas\" type=\"number\" variant=\"outlined\" max={24} min={0}/>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <TextField label={\"Fecha de inicio*\"}\r\n                            name={\"inicio\"}\r\n                            type={\"date\"}\r\n                            variant={\"outlined\"}\r\n                            min={new Date(Date.now()).toISOString().split(\"T\")[0]}\r\n                            onChange={updateStartDate} />\r\n                        <TextField label={\"Fecha de finalizacion\"}\r\n                            name={\"fin\"}\r\n                            type={\"date\"}\r\n                            variant={\"outlined\"}\r\n                            min={startDate.toISOString().split(\"T\")[0]}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </Overlay>\r\n        }\r\n    </>;\r\n}\r\n", "import { LugarOption } from \"~/types/Lugar\";\r\nimport { requestOptionsGetClient, url } from \"./api.config\";\r\n\r\nexport async function suggestLugar( token:string, query: string){\r\n\r\n    const requestOptions = requestOptionsGetClient(token);\r\n\r\n    const ciudades = fetch(`${url}/lugar/buscar/${query}`, requestOptions).then(response=>{\r\n        return response.text().then(text => {\r\n            return JSON.parse(text) as LugarOption[];\r\n        })\r\n    })\r\n\r\n    return await ciudades;\r\n}"],
  "mappings": "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",
  "names": ["require_sessions", "import_react", "import_jsx_dev_runtime", "import_empleados", "import_sessions", "import_react", "import_jsx_dev_runtime", "import_empleados", "import_react", "import_jsx_dev_runtime", "import_jsx_dev_runtime", "useFetcher", "import_jsx_dev_runtime"]
}
